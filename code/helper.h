#include <stdio.h>

int server_sock;
int client_socket;

unsigned char client_random[32];
unsigned char server_random[32];
unsigned char server_key_exchange[4096];
unsigned char server_certificate[4096];
unsigned char server_signature[4096];
unsigned char p[4096];
unsigned char g[4096];
unsigned char client_hello[4096];
unsigned char server_hello[4096];
unsigned char signature_data[4096];
unsigned char server_hello_done[9];
unsigned char modified_server_key_exchange[4096];

size_t modified_server_key_exchange_len = 0;
size_t server_key_exchange_len = 0;
size_t server_signature_len = 0;
size_t server_certificate_len = 0;
size_t p_len = 0;
size_t g_len = 0;
size_t signature_data_len = 0;

#define MASTER_SECRET_LENGTH 48
#define FINISHED_MESSAGE_LENGTH 12
#define PRE_MASTER_SECRET_LENGTH 1
#define SEED_LENGTH 64
#define MAC_KEY_LENGTH 32 // 20 bytes for HMAC-SHA256
#define IV_LENGTH 16      // 16 bytes for AES IV
#define ENC_KEY_LENGTH 16
#define KEY_BLOCK_SIZE (2 * (MAC_KEY_LENGTH + ENC_KEY_LENGTH + IV_LENGTH))


unsigned char master_secret[MASTER_SECRET_LENGTH];
unsigned char pre_master_secret[1] = {0x01};

// Declare the key material
unsigned char client_mac_key[MAC_KEY_LENGTH];
unsigned char server_mac_key[MAC_KEY_LENGTH];
unsigned char client_write_key[ENC_KEY_LENGTH];
unsigned char server_write_key[ENC_KEY_LENGTH];
unsigned char client_write_iv[IV_LENGTH];
unsigned char server_write_iv[IV_LENGTH];
unsigned char key_block[KEY_BLOCK_SIZE];

// void print_buffer(const unsigned char *buf, size_t len) {
//     if (buf == NULL || len == 0) {
//         return;
//     }

//     for (size_t i = 0; i < len; i++) {
//         printf("%02x ", buf[i]);
//         if ((i + 1) % 16 == 0) {
//             printf("\n");
//         }
//     }
//     printf("\n");
// }

// packet data
unsigned char prefix_sh[] = {0x16, 0x03, 0x03, 0x00, 0x39, 0x02, 0x00, 0x00, 0x35, 0x03, 0x03};
unsigned char server_hello_end[] = {0x00, 0x00, 0x67, 0x00, 0x00, 0x0d, 0xff, 0x01, 0x00, 0x01, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00};
unsigned char skx_prefix[] = {    
                0x16, 0x03, 0x03, 0x02, 0x95, 0x0c, 0x00, 0x02, 0x91,
                0x01, 0x30,
                0xd0, 0xb7, 0x5b, 0xad, 0x66, 0xfe, 0xc4, 0x46, 0xa8, 0xa9, 0x55, 0xe0, 0xdf, 0xce, 0x56, 0x9a,
                0x9a, 0x45, 0xa8, 0x41, 0xc2, 0xbd, 0xba, 0x4b, 0x84, 0x9c, 0x5a, 0x00, 0x6c, 0x08, 0x49, 0x36,
                0xc2, 0x5a, 0x07, 0x69, 0xb6, 0xf5, 0x7b, 0xa1, 0x99, 0x99, 0x61, 0xc5, 0xb0, 0xb6, 0x53, 0x01,
                0x38, 0x0d, 0x36, 0x6b, 0x70, 0xfc, 0x05, 0xe5, 0x1f, 0x59, 0x20, 0x6b, 0x81, 0x12, 0xfc, 0x85,
                0x1e, 0xa7, 0x96, 0x46, 0x55, 0xe2, 0x77, 0x48, 0x4b, 0x35, 0x1d, 0x4b, 0x12, 0xa5, 0x9b, 0x7c,
                0x37, 0x44, 0x42, 0xcd, 0x41, 0xa3, 0xac, 0xc7, 0xef, 0xa5, 0x03, 0x23, 0xee, 0x9c, 0x3a, 0x22,
                0x5e, 0xe6, 0xcd, 0xa5, 0x0d, 0x09, 0x57, 0x08, 0xc2, 0x08, 0xbe, 0x3e, 0x11, 0x2f, 0x96, 0x74,
                0x2c, 0x69, 0x7a, 0x38, 0x0b, 0x29, 0x93, 0x8e, 0x97, 0x68, 0xad, 0x52, 0x2c, 0x28, 0x76, 0x60,
                0xf5, 0x21, 0xb6, 0x6f, 0x57, 0x14, 0xd8, 0x9a, 0xd6, 0xc9, 0x60, 0xf9, 0x11, 0xbc, 0xcc, 0x6c,
                0xc5, 0xfd, 0x04, 0x7e, 0x2a, 0xe2, 0x69, 0xf6, 0x47, 0x4c, 0xb3, 0x1b, 0x92, 0x92, 0x45, 0x3d,
                0x73, 0x93, 0xb2, 0x80, 0xbf, 0xd5, 0x3f, 0xfc, 0x22, 0x32, 0xcf, 0xe6, 0x10, 0x46, 0x6f, 0x58,
                0x0a, 0x5e, 0x4e, 0x6e, 0xbd, 0x13, 0xba, 0x01, 0x5c, 0xb2, 0x0b, 0x7b, 0xac, 0x67, 0xfd, 0x3f,
                0xae, 0x1b, 0x94, 0xf9, 0xe6, 0xaf, 0x23, 0x9f, 0x33, 0x99, 0x48, 0x03, 0xc9, 0xbe, 0xda, 0x32,
                0x3c, 0x77, 0xf6, 0xa8, 0x63, 0xec, 0xbb, 0x46, 0xf0, 0x2e, 0xd6, 0x7b, 0x4c, 0xf2, 0x5b, 0xf9,
                0xe8, 0xb2, 0xce, 0x80, 0x8c, 0x77, 0x77, 0x65, 0xf0, 0x7d, 0x07, 0xef, 0xa5, 0x0b, 0x49, 0x77,
                0x68, 0x48, 0x21, 0x4a, 0x37, 0x5c, 0xec, 0xac, 0x32, 0x2e, 0xa2, 0xa5, 0x7e, 0xa0, 0xbc, 0xdb,
                0x82, 0xe7, 0x1c, 0x7c, 0x91, 0x25, 0x6c, 0x0a, 0x20, 0x6b, 0x9f, 0x65, 0x48, 0x3f, 0xed, 0xa1,
                0xa9, 0xcd, 0x18, 0xd3, 0x78, 0xc9, 0x62, 0x01, 0x34, 0x51, 0x35, 0xb6, 0xb4, 0xf7, 0x0d, 0x64,
                0x4e, 0x08, 0x58, 0xe0, 0x94, 0x21, 0x88, 0x08, 0x61, 0xfd
};

// Construct NewSessionTicket message
unsigned char new_session_ticket[] = {
        0x16, 0x03, 0x03,
        0x00, 0xaa, // Length of the message
        0x04,
        0x00, 0x00, 0xa6, // Length of the ticket
        0x00, 0x00, 0x1c, 0x20, // Session Ticket Lifetime Hint
        0x00, 0xa0, // Session Ticket Length
        0x8c, 0xa4, 0x9b, 0x76, 0x83, 0x26, 0x02, 0x6a, 0x94, 0xc8, 0x47, 0x32, 0xc8, 0x74, 0x57, 0xf1,
        0x5f, 0x2c, 0x5f, 0x3c, 0x9c, 0x0f, 0x91, 0x14, 0xbc, 0xc2, 0x0f, 0x6e, 0x87, 0xcb, 0x80, 0x34,
        0x34, 0x9e, 0xcc, 0x10, 0xcd, 0x3c, 0x72, 0x1e, 0x72, 0x41, 0x63, 0x06, 0xea, 0x1a, 0x86, 0x3e,
        0xdc, 0xf2, 0x48, 0x94, 0x8f, 0x0f, 0xef, 0x2f, 0x74, 0xfc, 0x70, 0x86, 0xeb, 0x08, 0xaa, 0xc1,
        0xef, 0x6c, 0x49, 0x2b, 0x67, 0x6b, 0x54, 0xc7, 0xfd, 0x0c, 0x55, 0x08, 0xe4, 0x6a, 0xd1, 0x84,
        0xbf, 0x73, 0x27, 0x4a, 0x13, 0x13, 0xa3, 0x5b, 0x7d, 0xe5, 0x44, 0xd3, 0xac, 0x30, 0xa5, 0x90,
        0x68, 0xfe, 0x33, 0xac, 0x1a, 0x9f, 0x95, 0xc2, 0xce, 0xb4, 0xbc, 0x55, 0x75, 0x65, 0x14, 0x46,
        0x69, 0x14, 0x9f, 0x96, 0xc8, 0x13, 0x03, 0xd0, 0xf0, 0x30, 0x83, 0xd1, 0x92, 0x16, 0xfc, 0x0b,
        0x58, 0xa3, 0x0c, 0x21, 0xe4, 0x5f, 0x5d, 0x1e, 0x06, 0x1f, 0xa3, 0x7e, 0x6c, 0x11, 0x8b, 0xde,
        0x29, 0x58, 0x59, 0xff, 0x89, 0x87, 0x78, 0x53, 0x02, 0xe8, 0xd7, 0xe2, 0x03, 0xa4, 0xf0, 0xc8  // Session Ticket
};

// Construct ChangeCipherSpec message
unsigned char change_cipher_spec[] = { 0x14, 0x03, 0x03, 0x00, 0x01, 0x01};

// Construct Encrypted Handshake message
unsigned char encrypted_handshake_prefix[] = {
        0x16, 0x03, 0x03, 
        0x00, 0x50, // Length of the message
};

unsigned char header[] = {0x14, 0x00, 0x00, 0x0c};
unsigned char header2[] = {0x14, 0x00, 0x00, 0x0c};