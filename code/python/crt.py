from cypari2 import Pari

def mod_inverse(a, b):
    """Compute the modular inverse of a under modulo b."""
    original_b = b
    x0, x1 = 0, 1
    while a > 1:
        q = a // b
        a, b = b, a % b
        x0, x1 = x1 - q * x0, x0
    
    if x1 < 0:
        x1 += original_b
    
    return x1

# Initialize Pari
pari = Pari()

# Constants
Primes = [518177537, 518177551, 518177593, 518177599, 518177609, 518177641, 518177651, 518177689, 518177717, 518177729, 518177749, 518177761, 518177813, 518177857, 518177903, 518177917, 518177923, 518177929, 518177987, 518177999, 518178019, 518178041, 518178053, 518178091, 518178107, 518178169, 518178181, 518178211, 518178217, 518178233, 518178257, 518178263, 518178281, 518178307, 518178313, 518178319, 518178341, 518178373, 518178407, 518178421, 518178433, 518178439, 518178443, 518178449, 518178457, 518178481, 518178497, 518178511, 518178571, 518178587, 518178593, 518178611, 518178629, 518178667, 518178709, 518178761, 518178779, 518178809, 518178833, 518178839, 518178841, 518178883, 518178953, 518178959, 518178961, 518178967, 518178977, 518178979, 518179003, 518179027, 518179037, 518179061, 518179097, 518179099, 518179127, 518179199, 518179219, 518179231, 518179243, 518179303, 518179309, 518179349, 518179373, 518179391]

public = int("9de552b7c3f7d4a0019083ed85b555c8df9125fedd331693159d781ee9eef86efc21f6853d6d8e527d090b9f328262eaa2a105461c78d0d1852126002fd68a26a3195bd03ee0e961411fa4dd29945e8082417eb5bcbfe75ff37ecb9459dc84db35a7a3515c483223fb2a1a71c325ae49a71bf50161c46faf5738c7f4129743eac47f6feed3138c5731be916a064c3697f01cc0df70bdd0a9c2470df50d40e02cd317d93922fa25c531694999cae3bf9f270bba87da56bf818d52b734776310a3b552d0910aab168174f5e15f237558b29ad26efb227bdc91d8a41ded2b4ba1b5c57bfc775c9e105fd56621488825d3093f1f96bf50bd53c170c21af7e7df1774cdf850d0cf251a61bcaa60e55fc3a91cdeb07f0071c2165c33ec28d35e4750f466bf3b12e55caf1ec1828a49e3df690a", 16)
#  private = int("6D5A521E321A26F6F643607CE65FCA50008C0CBF6642E79E1C5880D3A1503B664F51FA278A4E3842E6A7301147CE77F704860198A2B03ACB00FF0DB28B3F408465BF2B5CD3716B8F0357FE1F499C77AB1A46617203F24228EDFFA42E25EA82998F22D04D379F3AFBF3E2B4F2F7B5F74C7BB909EB7A4F4E5FE9410DB4B669E8DB8F1DE58CCF987BC523F4CA37105C847D3376457D4F6458C08C56CBDA28B76570C5E734CDF04EA1EE2538E6F77D0431EDA58F45E83838A110AB83CC765A626625574127F917AA8EBE4B54B7CFB24D6E2E07EEF428D785C0BBF9BE55E992085365233B69CA1FFDA9D01E19FFA5D2F0DB2510431A265D4874CE1DC440D9C265ABD342F34D003016808FB98F6809A61B287DF1634FDF8AC2145FB6925CCB057EA4AFB071F39D2285A8E5503E31459D2A0B54", 16)
base = int("1f9609b6473a4fb0a14627856351e1038ad367459a4c406f421ab94ea597ce812046264b9371451dce6969d40b45e7bf4ca3f9757ddf6e4069e616cd2721e40b63958e722e85788ed1d65ff0450b0ba3c31214555877", 16)

# Lists to store results
res = []
m = []
N = []

# Compute the product of all primes
n = 1
for p in Primes:
    n *= p

# Compute results using Chinese Remainder Theorem
for p in Primes:
    y = pari.Mod(public, p)
    res_i = pari.znlog(y, pari.Mod(base, p))
    res.append(res_i)
    m_i = n // p
    m.append(m_i)
    N_i = mod_inverse(m_i, p)
    N.append(N_i)

# Compute x using the CRT
x = 0
for i in range(len(Primes)):
    x += res[i] * m[i] * N[i]

x = x % n

print("n =", n)
print("x =", x)
print("base =", base)
print("public =", public)
